{"version":3,"sources":["App.jsx","index.jsx"],"names":["App","useState","text","setText","useEffect","Container","fluid","className","Row","Col","id","value","onChange","e","target","dangerouslySetInnerHTML","__html","marked","gfm","breaks","highlight","code","Prism","languages","javascript","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oTA6FeA,MAtFf,WACE,MAAwBC,mBAAS,IAAjC,mBAAOC,EAAP,KAAaC,EAAb,KAkDA,OAJAC,qBAAU,WACRD,EA9Ce,4pCA+Cd,IAGD,eAACE,EAAA,EAAD,CAAWC,OAAK,EAACC,UAAU,MAA3B,UACE,cAACC,EAAA,EAAD,UACE,oBAAID,UAAU,QAAd,qCAEF,eAACC,EAAA,EAAD,WACE,eAACC,EAAA,EAAD,CAAKF,UAAU,yBAAf,UACE,oBAAIA,UAAU,QAAd,oBACA,0BACEA,UAAU,eACVG,GAAG,SACHC,MAAOT,EACPU,SAAU,SAACC,GAAD,OAAOV,EAAQU,EAAEC,OAAOH,aAGtC,eAACF,EAAA,EAAD,CAAKF,UAAU,cAAf,UACE,oBAAIA,UAAU,QAAd,uBACA,qBACEA,UAAU,eACVG,GAAG,UAEHK,wBAAyB,CACvBC,OAAQC,IAAOf,EAAM,CACnBgB,KAAK,EACLC,QAAQ,EACRC,UAAW,SAACC,GAAD,OAAUC,IAAMF,UAAUC,EAAMC,IAAMC,UAAUC,4BC9E3EC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.964dd730.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { Container, Row, Col } from 'react-bootstrap';\r\nimport Prism from 'prismjs';\r\nimport 'prismjs/themes/prism-coy.css';\r\nimport marked from 'marked';\r\nimport './App.scss';\r\n\r\nfunction App() {\r\n  const [text, setText] = useState('');\r\n  const placeholder = `# Welcome to my React Markdown Previewer!\r\n\r\n## This is a sub-heading...\r\n### And here's some other cool stuff:\r\n\r\nHeres some code, \\`<div></div>\\`, between 2 backticks.\r\n\r\n\\`\\`\\`\r\n// this is multi-line code:\r\n\r\nfunction anotherExample(firstLine, lastLine) {\r\n  if (firstLine == '\\`\\`\\`' && lastLine == '\\`\\`\\`') {\r\n    return multiLineCode;\r\n  }\r\n}\r\n\\`\\`\\`\r\n\r\nYou can also make text **bold**... whoa!\r\nOr _italic_.\r\nOr... wait for it... **_both!_**\r\nAnd feel free to go crazy ~~crossing stuff out~~.\r\n\r\nThere's also [links](https://www.freecodecamp.org), and\r\n> Block Quotes!\r\n\r\nAnd if you want to get really crazy, even tables:\r\n\r\nWild Header | Crazy Header | Another Header?\r\n------------ | ------------- | -------------\r\nYour content can | be here, and it | can be here....\r\nAnd here. | Okay. | I think we get it.\r\n\r\n- And of course there are lists.\r\n  - Some are bulleted.\r\n     - With different indentation levels.\r\n        - That look like this.\r\n\r\n\r\n1. And there are numbered lists too.\r\n1. Use just 1s if you want!\r\n1. And last but not least, let's not forget embedded images:\r\n\r\n![freeCodeCamp Logo](https://cdn.freecodecamp.org/testable-projects-fcc/images/fcc_secondary.svg)\r\n`;\r\n\r\n  useEffect(() => {\r\n    setText(placeholder);\r\n  }, []);\r\n\r\n  return (\r\n    <Container fluid className=\"App\">\r\n      <Row>\r\n        <h1 className=\"title\">Preview Your Markdown</h1>\r\n      </Row>\r\n      <Row>\r\n        <Col className=\"previewWrap editorWrap\">\r\n          <h2 className=\"title\">Editor</h2>\r\n          <textarea\r\n            className=\"form-control\"\r\n            id=\"editor\"\r\n            value={text}\r\n            onChange={(e) => setText(e.target.value)}\r\n          />\r\n        </Col>\r\n        <Col className=\"previewWrap\">\r\n          <h2 className=\"title\">Previewer</h2>\r\n          <div\r\n            className=\"form-control\"\r\n            id=\"preview\"\r\n            // eslint-disable-next-line react/no-danger\r\n            dangerouslySetInnerHTML={{\r\n              __html: marked(text, {\r\n                gfm: true,\r\n                breaks: true,\r\n                highlight: (code) => Prism.highlight(code, Prism.languages.javascript),\r\n              }),\r\n            }}\r\n          />\r\n        </Col>\r\n      </Row>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root'),\r\n);\r\n"],"sourceRoot":""}